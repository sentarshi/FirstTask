import org.testng.Assert;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

@Test
public class PenTest {
    private final PrintStream standardOut = System.out;
    private final ByteArrayOutputStream outputStreamCaptor = new ByteArrayOutputStream();

    @BeforeTest
    public void setUp() {
        System.setOut(new PrintStream(outputStreamCaptor));
    }

    @DataProvider(name = "Happy3Params,inkContainer,sizeLetter,color")
    public Object[][] DatasetHappy3params() {
        return new Object[][] { { 1000,1.0,"Yellow"},};}


    @DataProvider(name = "3Params,inkContainer,sizeLetter,CustomWord")
    public Object[][] Dataset3params() {
        return new Object[][] { { "Work",1.0,10000,"Work"},
                { "Work",2.0,1000,"Work"},
                {"Work",3.0,15,"Work"},
                {"Work",3.0,11,"Wor"},
                {"Work",1.0,0,""},
                {"Work is done",1.0,0,""},
                {"",1.0,0,""},
                {"Work",1.2,24,"Work"},
                {"Work",1.2,24,"Work"},
                {"Work at Home",2.0,20,"Work at Home"},
                {"Work ",2.0,20,"Work"},
                {"Work ",2.0,10,"Work"},
                {"Work",0.0,20,""},
        };}
    @DataProvider(name = "2Params(inkContainer,sizeLetter)")
    public Object[][] Dataset2params() {
        return new Object[][]{
                {10000, 1.0},
                {0, 0.0},
                {1, 2.0},
                {-1, 1.0},
                {1, 0.5}
        };}


    /* public void doSomethingElse(){
         System.out.println(color);} */
    @Test (description = "This function seeems just write current color value", dataProvider = "Happy3Params,inkContainer,sizeLetter,color")

    public void testDosomethingElsePrint(int inkContainer, Double sizeLetter, String color) {
        Pen newpen = new Pen(inkContainer,sizeLetter,color);
        newpen.doSomethingElse();
        Assert.assertEquals(outputStreamCaptor.toString().trim(), "Yellow");
    }
    /*     public Boolean isWork() {
         return inkContainerValue > 0;} */
    @Test (dataProvider = "2Params(inkContainer,sizeLetter)", description = "HappyPath test of a function is pen working or not")
    public void testIsWork(int inkContainerValue, Double sizeLetter) {
        Pen newpen = new Pen(inkContainerValue,sizeLetter);
        Assert.assertTrue (newpen.isWork());
    }

    /* public String getColor(){
        return "BLUE";} */

   @Test (description = "HappyPathTest retrieving Pen Color" , dataProvider = "Happy3Params,inkContainer,sizeLetter,color")
   public void testGetColor(int inkContainer, Double sizeLetter, String color) {
       Pen newpen = new Pen(inkContainer,sizeLetter,color);
      Assert.assertEquals(newpen.getColor(),"Yellow");
    }

    /*  public String write(String word) {
        if (!isWork()) {
            return "";
        }
        double sizeOfWord = word.length()*sizeLetter;
        if (sizeOfWord<=inkContainerValue)
        {
            inkContainerValue -= sizeOfWord;
            return word;
        }
        String partOfWord = word.substring(0, inkContainerValue);
        inkContainerValue = 0;
        return partOfWord;
    }

     */

        @Test (dataProvider = "3Params,inkContainer,sizeLetter,CustomWord", description = "Verifying how Pen will work in different legal situations")
    public void testWrite(String word, Double sizeLetter,int inkContainerValue, String result) {
            Pen newpen = new Pen(inkContainerValue,sizeLetter);
        Assert.assertEquals(newpen.write(word),result);
    }

    

}
